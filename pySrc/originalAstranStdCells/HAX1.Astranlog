astran> read ./originalAstranStdCells//HAX1.run
-> Reading file: ./originalAstranStdCells//HAX1.run
-> Setting lpsolve executable to: /opt/gurobi950/linux64/bin/gurobi_cl
-> Loading technology from file: ../tools/astran/Astran/build/Work/tech_freePDK45.rul
-> Loading cells netlist from file: ../stdCelllib/cellsAstranFriendly.sp
-> Selecting cell netlist: HAX1
-> Trying with 3 tracks and conservative = 0 ...
-> Calculating cell area...
-> Applying folding...
-> Number of transistors before folding: 14 -> P(7) N(7)
-> Number of transistors after folding: 14 -> P(7) N(7)
-> Placing transistors...
 ( initial cost = 18255 num reps = 7350 problem size = 49 )  Iteration 1; cost = 28328.000 (18255.000); p_cost = 28328.000; accept = 1.000; avg_delta = 1.370; dp = 1857.787; thres = 99999.000; cost_ratio = 1.552; [0]
 Iteration 2; cost = 23794.000 (18255.000); p_cost = 23794.000; accept = 1.000; avg_delta = -0.617; dp = 1904.636; thres = 47999.520; cost_ratio = 0.840; [0]
 Iteration 3; cost = 27826.000 (18255.000); p_cost = 27826.000; accept = 1.000; avg_delta = 0.549; dp = 1866.224; thres = 23039.770; cost_ratio = 1.169; [0]
 Iteration 4; cost = 25045.000 (18255.000); p_cost = 25045.000; accept = 1.000; avg_delta = -0.378; dp = 1886.615; thres = 11059.089; cost_ratio = 0.900; [0]
