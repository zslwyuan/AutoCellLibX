astran> read ./originalAstranStdCells//BUFX4.run
-> Reading file: ./originalAstranStdCells//BUFX4.run
-> Setting lpsolve executable to: /opt/gurobi950/linux64/bin/gurobi_cl
-> Loading technology from file: ../tools/astran/Astran/build/Work/tech_freePDK45.rul
-> Loading cells netlist from file: ../stdCelllib/cellsAstranFriendly.sp
-> Selecting cell netlist: BUFX4
-> Trying with 3 tracks and conservative = 0 ...
-> Calculating cell area...
-> Applying folding...
-> Number of transistors before folding: 6 -> P(3) N(3)
-> Number of transistors after folding: 7 -> P(3) N(4)
-> Placing transistors...
 ( initial cost = 8259 num reps = 2400 problem size = 16 )  Iteration 1; cost = 7455.000 (7455.000); p_cost = 7455.000; accept = 1.000; avg_delta = -0.335; dp = 913.754; thres = 99999.000; cost_ratio = 0.903; [0]
 Iteration 2; cost = 8253.000 (7455.000); p_cost = 8253.000; accept = 1.000; avg_delta = 0.333; dp = 922.337; thres = 47999.520; cost_ratio = 1.107; [0]
 Iteration 3; cost = 9471.000 (7455.000); p_cost = 9471.000; accept = 1.000; avg_delta = 0.507; dp = 917.984; thres = 23039.770; cost_ratio = 1.148; [0]
 Iteration 4; cost = 9267.000 (7455.000); p_cost = 9267.000; accept = 1.000; avg_delta = -0.085; dp = 930.832; thres = 11059.089; cost_ratio = 0.978; [0]
 Iteration 5; cost = 9063.000 (7455.000); p_cost = 9063.000; accept = 1.000; avg_delta = -0.085; dp = 908.529; thres = 5308.363; cost_ratio = 0.978; [0]
 Iteration 6; cost = 8459.000 (7455.000); p_cost = 8459.000; accept = 0.985; avg_delta = -0.256; dp = 986.780; thres = 2548.014; cost_ratio = 0.933; [0]
 Iteration 7; cost = 8249.000 (7455.000); p_cost = 8249.000; accept = 0.738; avg_delta = -0.119; dp = 1239.515; thres = 1262.026; cost_ratio = 0.975; [0]
 Iteration 8; cost = 6124.000 (6124.000); p_cost = 6124.000; accept = 0.555; avg_delta = -1.597; dp = 1292.383; thres = 893.573; cost_ratio = 0.742; [0]
 Iteration 9; cost = 7435.000 (6124.000); p_cost = 7435.000; accept = 0.424; avg_delta = 1.288; dp = 1045.833; thres = 738.287; cost_ratio = 1.214; [0]
 Iteration 10; cost = 5116.000 (5116.000); p_cost = 5116.000; accept = 0.341; avg_delta = -2.835; dp = 900.094; thres = 657.106; cost_ratio = 0.688; [0]
 Iteration 11; cost = 7231.000 (5116.000); p_cost = 7231.000; accept = 0.301; avg_delta = 2.925; dp = 792.466; thres = 605.797; cost_ratio = 1.413; [0]
 Iteration 12; cost = 6631.000 (5116.000); p_cost = 6631.000; accept = 0.282; avg_delta = -0.888; dp = 667.510; thres = 566.192; cost_ratio = 0.917; [0]
 Iteration 13; cost = 5320.000 (5116.000); p_cost = 5320.000; accept = 0.306; avg_delta = -1.786; dp = 665.839; thres = 532.409; cost_ratio = 0.802; [0]
 Iteration 14; cost = 6328.000 (5116.000); p_cost = 6328.000; accept = 0.261; avg_delta = 1.608; dp = 286.775; thres = 496.861; cost_ratio = 1.189; [0]
 Iteration 15; cost = 5926.000 (5116.000); p_cost = 5926.000; accept = 0.272; avg_delta = -0.617; dp = 292.888; thres = 469.968; cost_ratio = 0.936; [0]
 Iteration 16; cost = 5730.000 (5116.000); p_cost = 5730.000; accept = 0.267; avg_delta = -0.306; dp = 335.745; thres = 443.227; cost_ratio = 0.967; [0]
 Iteration 17; cost = 5116.000 (5116.000); p_cost = 5116.000; accept = 0.273; avg_delta = -0.939; dp = 315.904; thres = 418.603; cost_ratio = 0.893; [0]
