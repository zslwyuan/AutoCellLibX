<?xml version="1.0" encoding="UTF-8"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:y="http://www.yworks.com/xml/graphml">
  <key for="node" id="n" yfiles.type="nodegraphics"/>
  <key for="edge" id="e" yfiles.type="edgegraphics"/>
  <key for="node" id="d" attr.name="Description" attr.type="string"/>
  <graph id="G" edgedefault="directed">
    <node id="1">
      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">VCU440FPGATestHarness</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
      <data key="d">VCU440FPGATestHarness (VCU440FPGATestHarness)</data>
      <graph id="1::" edgedefault="directed">
        <node id="1::13">
          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
          <data key="d">On Output Edge:

Master Name = TLSourceShrinker
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)


Slave Port Beatbytes = 8
Slave Port MinLatency = 6

Slave Name = island
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 2048]
putPartial = TransferSizes[1, 2048]
hint = TransferSizes[0, 0]




---------------------------------------------

, 
</data>
        </node>
        <node id="1::12">
          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
          <data key="d">, 
</data>
        </node>
        <node id="1::11">
          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
          <data key="d">, 
</data>
        </node>
        <node id="1::10">
          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
          <data key="d">, 
</data>
        </node>
        <node id="1::9">
          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
          <data key="d">, 
</data>
        </node>
        <node id="1::8">
          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
          <data key="d">, 
</data>
        </node>
        <node id="1::7">
          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
          <data key="d">, 
</data>
        </node>
        <node id="1::6">
          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
          <data key="d">, 
</data>
        </node>
        <node id="1::5">
          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
          <data key="d">, 
</data>
        </node>
        <node id="1::4">
          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
          <data key="d">, 
</data>
        </node>
        <node id="1::3">
          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
          <data key="d">, 
</data>
        </node>
        <node id="1::2">
          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
          <data key="d">, 
</data>
        </node>
        <node id="1::1">
          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
          <data key="d">, 
</data>
        </node>
        <node id="1::0">
          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
          <data key="d">, 
</data>
        </node>
        <node id="195">
          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">mig</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
          <data key="d">XilinxVCU440MIG (VCU440FPGATestHarness.mig)</data>
          <graph id="195::" edgedefault="directed">
            <node id="195::0">
              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
              <data key="d">, 
</data>
            </node>
            <node id="203">
              <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">axi4asource</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
              <data key="d">AXI4AsyncCrossingSource (VCU440FPGATestHarness.mig.axi4asource)</data>
              <graph id="203::" edgedefault="directed">
                <node id="203::0">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                  <data key="d">, 
</data>
                </node>
              </graph>
            </node>
            <node id="201">
              <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">island</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
              <data key="d">XilinxVCU440MIGIsland (VCU440FPGATestHarness.mig.island)</data>
              <graph id="201::" edgedefault="directed">
                <node id="201::1">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                  <data key="d">, 
</data>
                </node>
                <node id="201::0">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                  <data key="d">, 
</data>
                </node>
                <node id="202">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">axi4asink</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">AXI4AsyncCrossingSink (VCU440FPGATestHarness.mig.island.axi4asink)</data>
                  <graph id="202::" edgedefault="directed">
                    <node id="202::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                  </graph>
                </node>
              </graph>
            </node>
            <node id="200">
              <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">yank</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
              <data key="d">AXI4UserYanker_1 (VCU440FPGATestHarness.mig.yank)</data>
              <graph id="200::" edgedefault="directed">
                <node id="200::0">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                  <data key="d">, 
</data>
                </node>
              </graph>
            </node>
            <node id="199">
              <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">deint</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
              <data key="d">AXI4Deinterleaver (VCU440FPGATestHarness.mig.deint)</data>
              <graph id="199::" edgedefault="directed">
                <node id="199::0">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                  <data key="d">, 
</data>
                </node>
              </graph>
            </node>
            <node id="198">
              <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">indexer</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
              <data key="d">AXI4IdIndexer_1 (VCU440FPGATestHarness.mig.indexer)</data>
              <graph id="198::" edgedefault="directed">
                <node id="198::0">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                  <data key="d">, 
</data>
                </node>
              </graph>
            </node>
            <node id="197">
              <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">toaxi4</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
              <data key="d">TLToAXI4_1 (VCU440FPGATestHarness.mig.toaxi4)</data>
              <graph id="197::" edgedefault="directed">
                <node id="197::0">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                  <data key="d">, 
</data>
                </node>
              </graph>
            </node>
            <node id="196">
              <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">buffer</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
              <data key="d">TLBuffer_25 (VCU440FPGATestHarness.mig.buffer)</data>
              <graph id="196::" edgedefault="directed">
                <node id="196::0">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                  <data key="d">On Output Edge:

Master Name = TLSourceShrinker
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)


Slave Port Beatbytes = 8
Slave Port MinLatency = 4

Slave Name = island
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 2048]
putPartial = TransferSizes[1, 2048]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = TLSourceShrinker
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)


Slave Port Beatbytes = 8
Slave Port MinLatency = 6

Slave Name = island
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 2048]
putPartial = TransferSizes[1, 2048]
hint = TransferSizes[0, 0]



, 
a:BufferParams:2, b:BufferParams:2, c:BufferParams:2, d:BufferParams:2, e:BufferParams:2</data>
                </node>
              </graph>
            </node>
          </graph>
        </node>
        <node id="194">
          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">dutGroup</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
          <data key="d">ClockGroup_7 (VCU440FPGATestHarness.dutGroup)</data>
          <graph id="194::" edgedefault="directed">
            <node id="194::0">
              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
              <data key="d">, 
</data>
            </node>
          </graph>
        </node>
        <node id="193">
          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">dutWrangler</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
          <data key="d">ResetWrangler (VCU440FPGATestHarness.dutWrangler)</data>
          <graph id="193::" edgedefault="directed">
            <node id="193::0">
              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
              <data key="d">, 
</data>
            </node>
          </graph>
        </node>
        <node id="2">
          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">chiptop</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
          <data key="d">ChipTop (VCU440FPGATestHarness.chiptop)</data>
          <graph id="2::" edgedefault="directed">
            <node id="2::1">
              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
              <data key="d">, 
</data>
            </node>
            <node id="2::0">
              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
              <data key="d">, 
</data>
            </node>
            <node id="192">
              <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">dividerOnlyClockGen</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
              <data key="d">DividerOnlyClockGenerator (VCU440FPGATestHarness.chiptop.dividerOnlyClockGen)</data>
              <graph id="192::" edgedefault="directed">
                <node id="192::0">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                  <data key="d">, 
</data>
                </node>
              </graph>
            </node>
            <node id="191">
              <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">chipyardPRCI</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
              <data key="d">ClockGroup_6 (VCU440FPGATestHarness.chiptop.chipyardPRCI)</data>
              <graph id="191::" edgedefault="directed">
                <node id="191::0">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                  <data key="d">, 
</data>
                </node>
              </graph>
            </node>
            <node id="3">
              <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">system</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
              <data key="d">DigitalTop (VCU440FPGATestHarness.chiptop.system)</data>
              <graph id="3::" edgedefault="directed">
                <node id="3::26">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                  <data key="d">, 
</data>
                </node>
                <node id="3::25">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                  <data key="d">Interrupt Node
, 
</data>
                </node>
                <node id="3::24">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                  <data key="d">, 
</data>
                </node>
                <node id="3::23">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                  <data key="d">Interrupt Node
, 
</data>
                </node>
                <node id="3::21">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                  <data key="d">, 
</data>
                </node>
                <node id="3::20">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                  <data key="d">, 
</data>
                </node>
                <node id="3::16">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                  <data key="d">
---------------------------------------------

On Input Edge:

Master Name = TLSourceShrinker
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                </node>
                <node id="3::14">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                  <data key="d">Interrupt Node
, 
</data>
                </node>
                <node id="3::13">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                  <data key="d">Interrupt Node
, 
</data>
                </node>
                <node id="3::12">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                  <data key="d">Interrupt Node
, 
</data>
                </node>
                <node id="3::10">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                  <data key="d">Interrupt Node
, 
</data>
                </node>
                <node id="3::9">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                  <data key="d">Interrupt Node
, 
</data>
                </node>
                <node id="3::8">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                  <data key="d">Interrupt Node
, 
</data>
                </node>
                <node id="3::5">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                  <data key="d">Interrupt Node
, 
</data>
                </node>
                <node id="3::4">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                  <data key="d">Interrupt Node
, 
</data>
                </node>
                <node id="3::3">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                  <data key="d">Interrupt Node
, 
</data>
                </node>
                <node id="3::2">
                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                  <data key="d">, 
</data>
                </node>
                <node id="180">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">chipyardPRCI_5</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">ClockGroupResetSynchronizer (VCU440FPGATestHarness.chiptop.system.chipyardPRCI_5)</data>
                  <graph id="180::" edgedefault="directed">
                    <node id="180::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                  </graph>
                </node>
                <node id="179">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">chipyardPRCI_4</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">ClockGroupCombiner (VCU440FPGATestHarness.chiptop.system.chipyardPRCI_4)</data>
                  <graph id="179::" edgedefault="directed">
                    <node id="179::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                  </graph>
                </node>
                <node id="178">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">chipyardPRCI_3</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">ClockGroupParameterModifier_1 (VCU440FPGATestHarness.chiptop.system.chipyardPRCI_3)</data>
                  <graph id="178::" edgedefault="directed">
                    <node id="178::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                  </graph>
                </node>
                <node id="177">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">chipyardPRCI_2</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">ClockGroupParameterModifier (VCU440FPGATestHarness.chiptop.system.chipyardPRCI_2)</data>
                  <graph id="177::" edgedefault="directed">
                    <node id="177::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                  </graph>
                </node>
                <node id="176">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">chipyardPRCI_1</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">ClockGroupAggregator_6 (VCU440FPGATestHarness.chiptop.system.chipyardPRCI_1)</data>
                  <graph id="176::" edgedefault="directed">
                    <node id="176::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                  </graph>
                </node>
                <node id="175">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">chipyardPRCI</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">ClockSinkDomain_4 (VCU440FPGATestHarness.chiptop.system.chipyardPRCI)</data>
                  <graph id="175::" edgedefault="directed">
                    <node id="175::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                    <node id="186">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">chipyardPRCI_1</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TileResetSetter (VCU440FPGATestHarness.chiptop.system.chipyardPRCI.chipyardPRCI_1)</data>
                      <graph id="186::" edgedefault="directed">
                        <node id="186::1">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                        <node id="186::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">
---------------------------------------------

On Input Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]



, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="181">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">chipyardPRCI</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TileClockGater (VCU440FPGATestHarness.chiptop.system.chipyardPRCI.chipyardPRCI)</data>
                      <graph id="181::" edgedefault="directed">
                        <node id="181::1">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">
---------------------------------------------

On Input Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]



, 
</data>
                        </node>
                        <node id="181::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                  </graph>
                </node>
                <node id="173">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">intsink_5</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">IntSyncSyncCrossingSink_8 (VCU440FPGATestHarness.chiptop.system.intsink_5)</data>
                  <graph id="173::" edgedefault="directed">
                    <node id="173::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">Interrupt Node
, 
sync:0</data>
                    </node>
                  </graph>
                </node>
                <node id="168">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">spiClockDomainWrapper</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">ClockSinkDomain_3 (VCU440FPGATestHarness.chiptop.system.spiClockDomainWrapper)</data>
                  <graph id="168::" edgedefault="directed">
                    <node id="168::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                    <node id="169">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">spi_0</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLSPI (VCU440FPGATestHarness.chiptop.system.spiClockDomainWrapper.spi_0)</data>
                      <graph id="169::" edgedefault="directed">
                        <node id="169::4">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">Interrupt Node
, 
</data>
                        </node>
                        <node id="169::3">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                        <node id="169::2">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">
---------------------------------------------

On Input Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]



, 
</data>
                        </node>
                        <node id="169::1">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">Interrupt Node
, 
</data>
                        </node>
                        <node id="169::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                        <node id="174">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">intsource</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                          <data key="d">IntSyncCrossingSource_8 (VCU440FPGATestHarness.chiptop.system.spiClockDomainWrapper.spi_0.intsource)</data>
                          <graph id="174::" edgedefault="directed">
                            <node id="174::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">Interrupt Node
, 
alreadyRegistered:false</data>
                            </node>
                          </graph>
                        </node>
                        <node id="171">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">buffer</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                          <data key="d">TLBuffer_24 (VCU440FPGATestHarness.chiptop.system.spiClockDomainWrapper.spi_0.buffer)</data>
                          <graph id="171::" edgedefault="directed">
                            <node id="171::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                              <data key="d">, 
a:BufferParams:0, b:BufferParams:0, c:BufferParams:0, d:BufferParams:0, e:BufferParams:0</data>
                            </node>
                          </graph>
                        </node>
                      </graph>
                    </node>
                  </graph>
                </node>
                <node id="166">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">intsink_4</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">IntSyncSyncCrossingSink_7 (VCU440FPGATestHarness.chiptop.system.intsink_4)</data>
                  <graph id="166::" edgedefault="directed">
                    <node id="166::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">Interrupt Node
, 
sync:0</data>
                    </node>
                  </graph>
                </node>
                <node id="161">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">uartClockDomainWrapper</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">ClockSinkDomain_2 (VCU440FPGATestHarness.chiptop.system.uartClockDomainWrapper)</data>
                  <graph id="161::" edgedefault="directed">
                    <node id="161::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                    <node id="162">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">uart_0</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLUART (VCU440FPGATestHarness.chiptop.system.uartClockDomainWrapper.uart_0)</data>
                      <graph id="162::" edgedefault="directed">
                        <node id="162::4">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">Interrupt Node
, 
</data>
                        </node>
                        <node id="162::3">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                        <node id="162::2">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">
---------------------------------------------

On Input Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]



, 
</data>
                        </node>
                        <node id="162::1">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">Interrupt Node
, 
</data>
                        </node>
                        <node id="162::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                        <node id="167">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">intsource</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                          <data key="d">IntSyncCrossingSource_7 (VCU440FPGATestHarness.chiptop.system.uartClockDomainWrapper.uart_0.intsource)</data>
                          <graph id="167::" edgedefault="directed">
                            <node id="167::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">Interrupt Node
, 
alreadyRegistered:false</data>
                            </node>
                          </graph>
                        </node>
                        <node id="164">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">buffer</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                          <data key="d">TLBuffer_23 (VCU440FPGATestHarness.chiptop.system.uartClockDomainWrapper.uart_0.buffer)</data>
                          <graph id="164::" edgedefault="directed">
                            <node id="164::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                              <data key="d">, 
a:BufferParams:0, b:BufferParams:0, c:BufferParams:0, d:BufferParams:0, e:BufferParams:0</data>
                            </node>
                          </graph>
                        </node>
                      </graph>
                    </node>
                  </graph>
                </node>
                <node id="153">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">bootROMDomainWrapper</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">ClockSinkDomain_1 (VCU440FPGATestHarness.chiptop.system.bootROMDomainWrapper)</data>
                  <graph id="153::" edgedefault="directed">
                    <node id="153::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                    <node id="154">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">bootrom</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLROM (VCU440FPGATestHarness.chiptop.system.bootROMDomainWrapper.bootrom)</data>
                      <graph id="154::" edgedefault="directed">
                        <node id="154::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">
---------------------------------------------

On Input Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



, 
</data>
                        </node>
                      </graph>
                    </node>
                  </graph>
                </node>
                <node id="140">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">intsink_3</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">IntSyncSyncCrossingSink_6 (VCU440FPGATestHarness.chiptop.system.intsink_3)</data>
                  <graph id="140::" edgedefault="directed">
                    <node id="140::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">Interrupt Node
, 
sync:0</data>
                    </node>
                  </graph>
                </node>
                <node id="138">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">intsink_2</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">IntSyncSyncCrossingSink_5 (VCU440FPGATestHarness.chiptop.system.intsink_2)</data>
                  <graph id="138::" edgedefault="directed">
                    <node id="138::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">Interrupt Node
, 
sync:0</data>
                    </node>
                  </graph>
                </node>
                <node id="136">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">intsink_1</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">IntSyncSyncCrossingSink_4 (VCU440FPGATestHarness.chiptop.system.intsink_1)</data>
                  <graph id="136::" edgedefault="directed">
                    <node id="136::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">Interrupt Node
, 
sync:0</data>
                    </node>
                  </graph>
                </node>
                <node id="133">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">intsource_2</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">IntSyncCrossingSource_6 (VCU440FPGATestHarness.chiptop.system.intsource_2)</data>
                  <graph id="133::" edgedefault="directed">
                    <node id="133::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">Interrupt Node
, 
alreadyRegistered:false</data>
                    </node>
                  </graph>
                </node>
                <node id="131">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">intsource_1</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">IntSyncCrossingSource_5 (VCU440FPGATestHarness.chiptop.system.intsource_1)</data>
                  <graph id="131::" edgedefault="directed">
                    <node id="131::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">Interrupt Node
, 
alreadyRegistered:false</data>
                    </node>
                  </graph>
                </node>
                <node id="129">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">intsource</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">IntSyncCrossingSource_4 (VCU440FPGATestHarness.chiptop.system.intsource)</data>
                  <graph id="129::" edgedefault="directed">
                    <node id="129::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">Interrupt Node
, 
alreadyRegistered:false</data>
                    </node>
                  </graph>
                </node>
                <node id="127">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">null_int_source</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">NullIntSource (VCU440FPGATestHarness.chiptop.system.null_int_source)</data>
                  <graph id="127::" edgedefault="directed">
                    <node id="127::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">Interrupt Node
, 
</data>
                    </node>
                  </graph>
                </node>
                <node id="119">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">broadcast</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                  <data key="d">BundleBridgeNexus_16 (VCU440FPGATestHarness.chiptop.system.broadcast)</data>
                  <graph id="119::" edgedefault="directed">
                    <node id="119::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                  </graph>
                </node>
                <node id="118">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">tileHartIdNexusNode</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">BundleBridgeNexus_15 (VCU440FPGATestHarness.chiptop.system.tileHartIdNexusNode)</data>
                  <graph id="118::" edgedefault="directed">
                    <node id="118::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                  </graph>
                </node>
                <node id="117">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">xbar_2</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">IntXbar_4 (VCU440FPGATestHarness.chiptop.system.xbar_2)</data>
                  <graph id="117::" edgedefault="directed">
                    <node id="117::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">Interrupt Node
, 
</data>
                    </node>
                  </graph>
                </node>
                <node id="116">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">xbar_1</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">IntXbar_3 (VCU440FPGATestHarness.chiptop.system.xbar_1)</data>
                  <graph id="116::" edgedefault="directed">
                    <node id="116::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">Interrupt Node
, 
</data>
                    </node>
                  </graph>
                </node>
                <node id="115">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">xbar</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">IntXbar_2 (VCU440FPGATestHarness.chiptop.system.xbar)</data>
                  <graph id="115::" edgedefault="directed">
                    <node id="115::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">Interrupt Node
, 
</data>
                    </node>
                  </graph>
                </node>
                <node id="112">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">clint</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">CLINT (VCU440FPGATestHarness.chiptop.system.clint)</data>
                  <graph id="112::" edgedefault="directed">
                    <node id="112::1">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">Interrupt Node
, 
</data>
                    </node>
                    <node id="112::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">
---------------------------------------------

On Input Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]



, 
</data>
                    </node>
                  </graph>
                </node>
                <node id="108">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">plicDomainWrapper</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">ClockSinkDomain (VCU440FPGATestHarness.chiptop.system.plicDomainWrapper)</data>
                  <graph id="108::" edgedefault="directed">
                    <node id="108::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                    <node id="109">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">plic</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLPLIC (VCU440FPGATestHarness.chiptop.system.plicDomainWrapper.plic)</data>
                      <graph id="109::" edgedefault="directed">
                        <node id="109::1">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">Interrupt Node
, 
</data>
                        </node>
                        <node id="109::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">
---------------------------------------------

On Input Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 1

Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]



, 
</data>
                        </node>
                      </graph>
                    </node>
                  </graph>
                </node>
                <node id="80">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">tile_prci_domain</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">TilePRCIDomain (VCU440FPGATestHarness.chiptop.system.tile_prci_domain)</data>
                  <graph id="80::" edgedefault="directed">
                    <node id="80::12">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                      <data key="d">Interrupt Node
, 
</data>
                    </node>
                    <node id="80::11">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                      <data key="d">Interrupt Node
, 
</data>
                    </node>
                    <node id="80::10">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                      <data key="d">Interrupt Node
, 
</data>
                    </node>
                    <node id="80::7">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                      <data key="d">Interrupt Node
, 
</data>
                    </node>
                    <node id="80::6">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                      <data key="d">Interrupt Node
, 
</data>
                    </node>
                    <node id="80::5">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                      <data key="d">Interrupt Node
, 
</data>
                    </node>
                    <node id="80::3">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                    <node id="80::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                    <node id="143">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">tracecore</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">BundleBridgeNexus_14 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tracecore)</data>
                      <graph id="143::" edgedefault="directed">
                        <node id="143::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="142">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">trace</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">BundleBridgeNexus_13 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.trace)</data>
                      <graph id="142::" edgedefault="directed">
                        <node id="142::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="141">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">intsource_3</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">IntSyncCrossingSource_3 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.intsource_3)</data>
                      <graph id="141::" edgedefault="directed">
                        <node id="141::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">Interrupt Node
, 
alreadyRegistered:false</data>
                        </node>
                      </graph>
                    </node>
                    <node id="139">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">intsource_2</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">IntSyncCrossingSource_2 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.intsource_2)</data>
                      <graph id="139::" edgedefault="directed">
                        <node id="139::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">Interrupt Node
, 
alreadyRegistered:false</data>
                        </node>
                      </graph>
                    </node>
                    <node id="137">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">intsource_1</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">IntSyncCrossingSource_1 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.intsource_1)</data>
                      <graph id="137::" edgedefault="directed">
                        <node id="137::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">Interrupt Node
, 
alreadyRegistered:false</data>
                        </node>
                      </graph>
                    </node>
                    <node id="132">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">intsink_2</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">IntSyncSyncCrossingSink_2 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.intsink_2)</data>
                      <graph id="132::" edgedefault="directed">
                        <node id="132::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">Interrupt Node
, 
sync:0</data>
                        </node>
                      </graph>
                    </node>
                    <node id="130">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">intsink_1</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">IntSyncSyncCrossingSink_1 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.intsink_1)</data>
                      <graph id="130::" edgedefault="directed">
                        <node id="130::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">Interrupt Node
, 
sync:0</data>
                        </node>
                      </graph>
                    </node>
                    <node id="128">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">intsink</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">IntSyncSyncCrossingSink (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.intsink)</data>
                      <graph id="128::" edgedefault="directed">
                        <node id="128::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">Interrupt Node
, 
sync:0</data>
                        </node>
                      </graph>
                    </node>
                    <node id="122">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">buffer_1</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLBuffer_20 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.buffer_1)</data>
                      <graph id="122::" edgedefault="directed">
                        <node id="122::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



On Output Edge:

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(1,2)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(2,3)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)


Slave Port Beatbytes = 16
Slave Port MinLatency = 4

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



On Input Edge:

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(1,2)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(2,3)


Slave Port Beatbytes = 16
Slave Port MinLatency = 4

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



, 
a:BufferParams:2, b:BufferParams:2, c:BufferParams:2, d:BufferParams:2, e:BufferParams:2</data>
                        </node>
                      </graph>
                    </node>
                    <node id="121">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">buffer</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">TLBuffer_19 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.buffer)</data>
                      <graph id="121::" edgedefault="directed">
                        <node id="121::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
a:BufferParams:0, b:BufferParams:0, c:BufferParams:0, d:BufferParams:0, e:BufferParams:0</data>
                        </node>
                      </graph>
                    </node>
                    <node id="82">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">clockNode</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">FixedClockBroadcast_6 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.clockNode)</data>
                      <graph id="82::" edgedefault="directed">
                        <node id="82::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="81">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">tile_reset_domain</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">TileResetDomain (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain)</data>
                      <graph id="81::" edgedefault="directed">
                        <node id="81::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                        <node id="83">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">tile</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                          <data key="d">RocketTile (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain.tile)</data>
                          <graph id="83::" edgedefault="directed">
                            <node id="83::18">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">Interrupt Node
, 
</data>
                            </node>
                            <node id="83::17">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">Interrupt Node
, 
</data>
                            </node>
                            <node id="83::16">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">Interrupt Node
, 
</data>
                            </node>
                            <node id="83::15">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">Interrupt Node
, 
</data>
                            </node>
                            <node id="83::14">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                              <data key="d">Interrupt Node
, 
</data>
                            </node>
                            <node id="83::12">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">, 
</data>
                            </node>
                            <node id="83::10">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">, 
</data>
                            </node>
                            <node id="83::9">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">, 
</data>
                            </node>
                            <node id="83::8">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">, 
</data>
                            </node>
                            <node id="83::6">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                              <data key="d">, 
</data>
                            </node>
                            <node id="83::5">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">, 
</data>
                            </node>
                            <node id="83::4">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                              <data key="d">, 
</data>
                            </node>
                            <node id="83::3">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">, 
</data>
                            </node>
                            <node id="83::2">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                              <data key="d">, 
</data>
                            </node>
                            <node id="83::1">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">, 
</data>
                            </node>
                            <node id="83::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                              <data key="d">, 
</data>
                            </node>
                            <node id="104">
                              <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">frontend</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                              <data key="d">Frontend (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain.tile.frontend)</data>
                              <graph id="104::" edgedefault="directed">
                                <node id="104::0">
                                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                                  <data key="d">, 
</data>
                                </node>
                                <node id="105">
                                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">icache</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                                  <data key="d">ICache (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain.tile.frontend.icache)</data>
                                  <graph id="105::" edgedefault="directed">
                                    <node id="105::0">
                                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                                      <data key="d">On Output Edge:

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1)


Slave Port Beatbytes = 16
Slave Port MinLatency = 4

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]




---------------------------------------------

, 
</data>
                                    </node>
                                  </graph>
                                </node>
                              </graph>
                            </node>
                            <node id="95">
                              <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">gemmini</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                              <data key="d">Gemmini (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain.tile.gemmini)</data>
                              <graph id="95::" edgedefault="directed">
                                <node id="96">
                                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">spad</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                                  <data key="d">Scratchpad (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain.tile.gemmini.spad)</data>
                                  <graph id="96::" edgedefault="directed">
                                    <node id="96::0">
                                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                                      <data key="d">, 
</data>
                                    </node>
                                    <node id="103">
                                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">buffer_2</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                                      <data key="d">TLBuffer_18 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain.tile.gemmini.spad.buffer_2)</data>
                                      <graph id="103::" edgedefault="directed">
                                        <node id="103::0">
                                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                                          <data key="d">On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)


Slave Port Beatbytes = 16
Slave Port MinLatency = 4

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)


Slave Port Beatbytes = 16
Slave Port MinLatency = 6

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



, 
a:BufferParams:2, b:BufferParams:2, c:BufferParams:2, d:BufferParams:2, e:BufferParams:2</data>
                                        </node>
                                      </graph>
                                    </node>
                                    <node id="102">
                                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">buffer_1</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                                      <data key="d">TLBuffer_17 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain.tile.gemmini.spad.buffer_1)</data>
                                      <graph id="102::" edgedefault="directed">
                                        <node id="102::0">
                                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                                          <data key="d">On Output Edge:

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)


Slave Port Beatbytes = 16
Slave Port MinLatency = 6

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]




---------------------------------------------

On Input Edge:

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)


Slave Port Beatbytes = 16
Slave Port MinLatency = 8

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



, 
a:BufferParams:2, b:BufferParams:2, c:BufferParams:2, d:BufferParams:2, e:BufferParams:2</data>
                                        </node>
                                      </graph>
                                    </node>
                                    <node id="101">
                                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">buffer</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                                      <data key="d">TLBuffer_16 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain.tile.gemmini.spad.buffer)</data>
                                      <graph id="101::" edgedefault="directed">
                                        <node id="101::0">
                                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                                          <data key="d">On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)


Slave Port Beatbytes = 16
Slave Port MinLatency = 6

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)


Slave Port Beatbytes = 16
Slave Port MinLatency = 8

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



, 
a:BufferParams:2, b:BufferParams:2, c:BufferParams:2, d:BufferParams:2, e:BufferParams:2</data>
                                        </node>
                                      </graph>
                                    </node>
                                    <node id="100">
                                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">writer</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                                      <data key="d">StreamWriter (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain.tile.gemmini.spad.writer)</data>
                                      <graph id="100::" edgedefault="directed">
                                        <node id="100::0">
                                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                                          <data key="d">On Output Edge:

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)


Slave Port Beatbytes = 16
Slave Port MinLatency = 8

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]




---------------------------------------------

, 
</data>
                                        </node>
                                      </graph>
                                    </node>
                                    <node id="98">
                                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">reader</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                                      <data key="d">StreamReader (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain.tile.gemmini.spad.reader)</data>
                                      <graph id="98::" edgedefault="directed">
                                        <node id="99">
                                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">core</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                                          <data key="d">StreamReaderCore (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain.tile.gemmini.spad.reader.core)</data>
                                          <graph id="99::" edgedefault="directed">
                                            <node id="99::0">
                                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                                              <data key="d">On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)


Slave Port Beatbytes = 16
Slave Port MinLatency = 8

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]




---------------------------------------------

, 
</data>
                                            </node>
                                          </graph>
                                        </node>
                                      </graph>
                                    </node>
                                    <node id="97">
                                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">xbar</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                                      <data key="d">TLXbar_9 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain.tile.gemmini.spad.xbar)</data>
                                      <graph id="97::" edgedefault="directed">
                                        <node id="97::0">
                                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                                          <data key="d">On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)


Slave Port Beatbytes = 16
Slave Port MinLatency = 6

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)


Slave Port Beatbytes = 16
Slave Port MinLatency = 6

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



On Input Edge:

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)


Slave Port Beatbytes = 16
Slave Port MinLatency = 6

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



, 
</data>
                                        </node>
                                      </graph>
                                    </node>
                                  </graph>
                                </node>
                              </graph>
                            </node>
                            <node id="94">
                              <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">dcache</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                              <data key="d">DCache (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain.tile.dcache)</data>
                              <graph id="94::" edgedefault="directed">
                                <node id="94::0">
                                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                                  <data key="d">On Output Edge:

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(1,2)


Slave Port Beatbytes = 16
Slave Port MinLatency = 4

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]




---------------------------------------------

, 
</data>
                                </node>
                              </graph>
                            </node>
                            <node id="93">
                              <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">broadcast_4</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                              <data key="d">BundleBridgeNexus_12 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain.tile.broadcast_4)</data>
                              <graph id="93::" edgedefault="directed">
                                <node id="93::0">
                                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                                  <data key="d">, 
</data>
                                </node>
                              </graph>
                            </node>
                            <node id="92">
                              <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">nexus_1</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                              <data key="d">BundleBridgeNexus_11 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain.tile.nexus_1)</data>
                              <graph id="92::" edgedefault="directed">
                                <node id="92::0">
                                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                                  <data key="d">, 
</data>
                                </node>
                              </graph>
                            </node>
                            <node id="91">
                              <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">broadcast_3</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                              <data key="d">BundleBridgeNexus_10 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain.tile.broadcast_3)</data>
                              <graph id="91::" edgedefault="directed">
                                <node id="91::0">
                                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                                  <data key="d">, 
</data>
                                </node>
                              </graph>
                            </node>
                            <node id="89">
                              <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">broadcast_2</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                              <data key="d">BundleBridgeNexus_8 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain.tile.broadcast_2)</data>
                              <graph id="89::" edgedefault="directed">
                                <node id="89::0">
                                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                                  <data key="d">, 
</data>
                                </node>
                              </graph>
                            </node>
                            <node id="88">
                              <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">broadcast_1</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                              <data key="d">BundleBridgeNexus_7 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain.tile.broadcast_1)</data>
                              <graph id="88::" edgedefault="directed">
                                <node id="88::0">
                                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                                  <data key="d">, 
</data>
                                </node>
                              </graph>
                            </node>
                            <node id="87">
                              <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">broadcast</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                              <data key="d">BundleBridgeNexus_6 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain.tile.broadcast)</data>
                              <graph id="87::" edgedefault="directed">
                                <node id="87::0">
                                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                                  <data key="d">, 
</data>
                                </node>
                              </graph>
                            </node>
                            <node id="86">
                              <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">intXbar</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                              <data key="d">IntXbar_1 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain.tile.intXbar)</data>
                              <graph id="86::" edgedefault="directed">
                                <node id="86::0">
                                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                                  <data key="d">Interrupt Node
, 
</data>
                                </node>
                              </graph>
                            </node>
                            <node id="84">
                              <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">tlMasterXbar</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                              <data key="d">TLXbar_7 (VCU440FPGATestHarness.chiptop.system.tile_prci_domain.tile_reset_domain.tile.tlMasterXbar)</data>
                              <graph id="84::" edgedefault="directed">
                                <node id="84::0">
                                  <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                                  <data key="d">On Output Edge:

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(1,2)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(2,3)


Slave Port Beatbytes = 16
Slave Port MinLatency = 4

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]




---------------------------------------------

On Input Edge:

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(1,2)


Slave Port Beatbytes = 16
Slave Port MinLatency = 4

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



On Input Edge:

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1)


Slave Port Beatbytes = 16
Slave Port MinLatency = 4

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



, 
</data>
                                </node>
                              </graph>
                            </node>
                          </graph>
                        </node>
                      </graph>
                    </node>
                  </graph>
                </node>
                <node id="51">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">subsystem_l2_wrapper</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">CoherenceManagerWrapper (VCU440FPGATestHarness.chiptop.system.subsystem_l2_wrapper)</data>
                  <graph id="51::" edgedefault="directed">
                    <node id="51::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                    <node id="77">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">coupler_to_bus_named_subsystem_mbus</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">TLInterconnectCoupler_18 (VCU440FPGATestHarness.chiptop.system.subsystem_l2_wrapper.coupler_to_bus_named_subsystem_mbus)</data>
                      <graph id="77::" edgedefault="directed">
                        <node id="77::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                        <node id="79">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">widget</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                          <data key="d">TLWidthWidget_7 (VCU440FPGATestHarness.chiptop.system.subsystem_l2_wrapper.coupler_to_bus_named_subsystem_mbus.widget)</data>
                          <graph id="79::" edgedefault="directed">
                            <node id="79::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                              <data key="d">, 
</data>
                            </node>
                          </graph>
                        </node>
                      </graph>
                    </node>
                    <node id="65">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">binder</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">BankBinder (VCU440FPGATestHarness.chiptop.system.subsystem_l2_wrapper.binder)</data>
                      <graph id="65::" edgedefault="directed">
                        <node id="65::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">On Output Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Output Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x40, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Output Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x80, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Output Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0xc0, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Input Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Input Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Input Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="64">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">coherent_jbar</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">TLJbar (VCU440FPGATestHarness.chiptop.system.subsystem_l2_wrapper.coherent_jbar)</data>
                      <graph id="64::" edgedefault="directed">
                        <node id="64::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="60">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">cork</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLCacheCork (VCU440FPGATestHarness.chiptop.system.subsystem_l2_wrapper.cork)</data>
                      <graph id="60::" edgedefault="directed">
                        <node id="60::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">On Output Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Output Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Output Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Output Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,10)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[1, 64]
acquireB = TransferSizes[1, 64]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Input Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,10)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[1, 64]
acquireB = TransferSizes[1, 64]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Input Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,10)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[1, 64]
acquireB = TransferSizes[1, 64]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Input Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,10)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[1, 64]
acquireB = TransferSizes[1, 64]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="59">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">InclusiveCache_outer_TLBuffer</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">TLBuffer_15 (VCU440FPGATestHarness.chiptop.system.subsystem_l2_wrapper.InclusiveCache_outer_TLBuffer)</data>
                      <graph id="59::" edgedefault="directed">
                        <node id="59::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
a:BufferParams:0, b:BufferParams:0, c:BufferParams:0, d:BufferParams:0, e:BufferParams:0</data>
                        </node>
                      </graph>
                    </node>
                    <node id="58">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">InclusiveCache_inner_TLBuffer</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLBuffer_14 (VCU440FPGATestHarness.chiptop.system.subsystem_l2_wrapper.InclusiveCache_inner_TLBuffer)</data>
                      <graph id="58::" edgedefault="directed">
                        <node id="58::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



, 
a:BufferParams:1F, b:BufferParams:0, c:BufferParams:0, d:BufferParams:1F, e:BufferParams:0</data>
                        </node>
                      </graph>
                    </node>
                    <node id="57">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">filter</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">TLFilter (VCU440FPGATestHarness.chiptop.system.subsystem_l2_wrapper.filter)</data>
                      <graph id="57::" edgedefault="directed">
                        <node id="57::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="56">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">l2</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">InclusiveCache (VCU440FPGATestHarness.chiptop.system.subsystem_l2_wrapper.l2)</data>
                      <graph id="56::" edgedefault="directed">
                        <node id="56::1">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">
---------------------------------------------

On Input Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 1

Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]



, 
</data>
                        </node>
                        <node id="56::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">On Output Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,10)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[1, 64]
acquireB = TransferSizes[1, 64]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Output Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,10)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[1, 64]
acquireB = TransferSizes[1, 64]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Output Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,10)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[1, 64]
acquireB = TransferSizes[1, 64]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Output Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,10)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[1, 64]
acquireB = TransferSizes[1, 64]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="54">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">fixedClockNode</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">FixedClockBroadcast_5 (VCU440FPGATestHarness.chiptop.system.subsystem_l2_wrapper.fixedClockNode)</data>
                      <graph id="54::" edgedefault="directed">
                        <node id="54::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="53">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">clockGroup</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">ClockGroup_5 (VCU440FPGATestHarness.chiptop.system.subsystem_l2_wrapper.clockGroup)</data>
                      <graph id="53::" edgedefault="directed">
                        <node id="53::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="52">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">subsystem_l2_clock_groups</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">ClockGroupAggregator_5 (VCU440FPGATestHarness.chiptop.system.subsystem_l2_wrapper.subsystem_l2_clock_groups)</data>
                      <graph id="52::" edgedefault="directed">
                        <node id="52::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                  </graph>
                </node>
                <node id="43">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">subsystem_mbus</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">MemoryBus (VCU440FPGATestHarness.chiptop.system.subsystem_mbus)</data>
                  <graph id="43::" edgedefault="directed">
                    <node id="43::1">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                    <node id="43::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                    <node id="144">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">coupler_to_memory_controller_port_named_tl_mem</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLInterconnectCoupler_16 (VCU440FPGATestHarness.chiptop.system.subsystem_mbus.coupler_to_memory_controller_port_named_tl_mem)</data>
                      <graph id="144::" edgedefault="directed">
                        <node id="144::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                        <node id="147">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">widget</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                          <data key="d">TLWidthWidget_5 (VCU440FPGATestHarness.chiptop.system.subsystem_mbus.coupler_to_memory_controller_port_named_tl_mem.widget)</data>
                          <graph id="147::" edgedefault="directed">
                            <node id="147::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                              <data key="d">, 
</data>
                            </node>
                          </graph>
                        </node>
                        <node id="146">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">shrinker</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                          <data key="d">TLSourceShrinker (VCU440FPGATestHarness.chiptop.system.subsystem_mbus.coupler_to_memory_controller_port_named_tl_mem.shrinker)</data>
                          <graph id="146::" edgedefault="directed">
                            <node id="146::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">On Output Edge:

Master Name = TLSourceShrinker
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,116)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                            </node>
                          </graph>
                        </node>
                        <node id="145">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">buffer</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                          <data key="d">TLBuffer_13 (VCU440FPGATestHarness.chiptop.system.subsystem_mbus.coupler_to_memory_controller_port_named_tl_mem.buffer)</data>
                          <graph id="145::" edgedefault="directed">
                            <node id="145::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">On Output Edge:

Master Name = TLSourceShrinker
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = TLSourceShrinker
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
a:BufferParams:2, b:BufferParams:2, c:BufferParams:2, d:BufferParams:2, e:BufferParams:2</data>
                            </node>
                          </graph>
                        </node>
                      </graph>
                    </node>
                    <node id="78">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">buffer</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">TLBuffer_12 (VCU440FPGATestHarness.chiptop.system.subsystem_mbus.buffer)</data>
                      <graph id="78::" edgedefault="directed">
                        <node id="78::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
a:BufferParams:0, b:BufferParams:0, c:BufferParams:0, d:BufferParams:0, e:BufferParams:0</data>
                        </node>
                      </graph>
                    </node>
                    <node id="50">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">picker</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">ProbePicker (VCU440FPGATestHarness.chiptop.system.subsystem_mbus.picker)</data>
                      <graph id="50::" edgedefault="directed">
                        <node id="50::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">On Output Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,116)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(96,116)

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x40, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,84)

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x80, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,52)

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0xc0, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="49">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">fixer</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLFIFOFixer_3 (VCU440FPGATestHarness.chiptop.system.subsystem_mbus.fixer)</data>
                      <graph id="49::" edgedefault="directed">
                        <node id="49::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">On Output Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Output Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x40, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Output Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x80, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Output Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0xc0, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Input Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x40, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Input Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x80, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Input Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0xc0, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="48">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">subsystem_mbus_xbar</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLXbar_6 (VCU440FPGATestHarness.chiptop.system.subsystem_mbus.subsystem_mbus_xbar)</data>
                      <graph id="48::" edgedefault="directed">
                        <node id="48::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">On Output Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(96,116)

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x40, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,84)

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x80, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,52)

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0xc0, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x0, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Input Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x40, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Input Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0x80, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Input Edge:

Master Name = L2 InclusiveCache
visibility = List(AddressSet(0xc0, ~0xc0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,20)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="46">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">fixedClockNode</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">FixedClockBroadcast_4 (VCU440FPGATestHarness.chiptop.system.subsystem_mbus.fixedClockNode)</data>
                      <graph id="46::" edgedefault="directed">
                        <node id="46::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="45">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">clockGroup</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">ClockGroup_4 (VCU440FPGATestHarness.chiptop.system.subsystem_mbus.clockGroup)</data>
                      <graph id="45::" edgedefault="directed">
                        <node id="45::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="44">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">subsystem_mbus_clock_groups</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">ClockGroupAggregator_4 (VCU440FPGATestHarness.chiptop.system.subsystem_mbus.subsystem_mbus_clock_groups)</data>
                      <graph id="44::" edgedefault="directed">
                        <node id="44::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                  </graph>
                </node>
                <node id="30">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">subsystem_cbus</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">PeripheryBus_1 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus)</data>
                  <graph id="30::" edgedefault="directed">
                    <node id="30::2">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">On Output Edge:

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]




---------------------------------------------

, 
</data>
                    </node>
                    <node id="30::1">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                    <node id="30::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                    <node id="187">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">coupler_to_slave_named_tileresetsetter</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLInterconnectCoupler_15 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.coupler_to_slave_named_tileresetsetter)</data>
                      <graph id="187::" edgedefault="directed">
                        <node id="190">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">buffer_1</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                          <data key="d">TLBuffer_11 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.coupler_to_slave_named_tileresetsetter.buffer_1)</data>
                          <graph id="190::" edgedefault="directed">
                            <node id="190::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                              <data key="d">, 
a:BufferParams:0, b:BufferParams:0, c:BufferParams:0, d:BufferParams:0, e:BufferParams:0</data>
                            </node>
                          </graph>
                        </node>
                        <node id="189">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">fragmenter</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                          <data key="d">TLFragmenter_8 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.coupler_to_slave_named_tileresetsetter.fragmenter)</data>
                          <graph id="189::" edgedefault="directed">
                            <node id="189::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">On Output Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                            </node>
                          </graph>
                        </node>
                        <node id="188">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">buffer</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                          <data key="d">TLBuffer_10 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.coupler_to_slave_named_tileresetsetter.buffer)</data>
                          <graph id="188::" edgedefault="directed">
                            <node id="188::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">On Output Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]



, 
a:BufferParams:2, b:BufferParams:2, c:BufferParams:2, d:BufferParams:2, e:BufferParams:2</data>
                            </node>
                          </graph>
                        </node>
                      </graph>
                    </node>
                    <node id="182">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">coupler_to_slave_named_clockgater</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLInterconnectCoupler_14 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.coupler_to_slave_named_clockgater)</data>
                      <graph id="182::" edgedefault="directed">
                        <node id="185">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">buffer_1</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                          <data key="d">TLBuffer_9 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.coupler_to_slave_named_clockgater.buffer_1)</data>
                          <graph id="185::" edgedefault="directed">
                            <node id="185::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                              <data key="d">, 
a:BufferParams:0, b:BufferParams:0, c:BufferParams:0, d:BufferParams:0, e:BufferParams:0</data>
                            </node>
                          </graph>
                        </node>
                        <node id="184">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">fragmenter</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                          <data key="d">TLFragmenter_7 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.coupler_to_slave_named_clockgater.fragmenter)</data>
                          <graph id="184::" edgedefault="directed">
                            <node id="184::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">On Output Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                            </node>
                          </graph>
                        </node>
                        <node id="183">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">buffer</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                          <data key="d">TLBuffer_8 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.coupler_to_slave_named_clockgater.buffer)</data>
                          <graph id="183::" edgedefault="directed">
                            <node id="183::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">On Output Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]



, 
a:BufferParams:2, b:BufferParams:2, c:BufferParams:2, d:BufferParams:2, e:BufferParams:2</data>
                            </node>
                          </graph>
                        </node>
                      </graph>
                    </node>
                    <node id="157">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">coupler_from_port_named_custom_boot_pin</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">TLInterconnectCoupler_13 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.coupler_from_port_named_custom_boot_pin)</data>
                      <graph id="157::" edgedefault="directed">
                        <node id="157::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="155">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">coupler_to_bootrom</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLInterconnectCoupler_12 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.coupler_to_bootrom)</data>
                      <graph id="155::" edgedefault="directed">
                        <node id="155::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                        <node id="156">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">fragmenter</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                          <data key="d">TLFragmenter_6 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.coupler_to_bootrom.fragmenter)</data>
                          <graph id="156::" edgedefault="directed">
                            <node id="156::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">On Output Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



, 
</data>
                            </node>
                          </graph>
                        </node>
                      </graph>
                    </node>
                    <node id="113">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">coupler_to_clint</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLInterconnectCoupler_10 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.coupler_to_clint)</data>
                      <graph id="113::" edgedefault="directed">
                        <node id="113::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                        <node id="114">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">fragmenter</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                          <data key="d">TLFragmenter_5 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.coupler_to_clint.fragmenter)</data>
                          <graph id="114::" edgedefault="directed">
                            <node id="114::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">On Output Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                            </node>
                          </graph>
                        </node>
                      </graph>
                    </node>
                    <node id="110">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">coupler_to_plic</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLInterconnectCoupler_9 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.coupler_to_plic)</data>
                      <graph id="110::" edgedefault="directed">
                        <node id="110::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                        <node id="111">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">fragmenter</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                          <data key="d">TLFragmenter_4 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.coupler_to_plic.fragmenter)</data>
                          <graph id="111::" edgedefault="directed">
                            <node id="111::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">On Output Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 1

Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 1

Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                            </node>
                          </graph>
                        </node>
                      </graph>
                    </node>
                    <node id="69">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">coupler_to_bus_named_subsystem_pbus</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">TLInterconnectCoupler_8 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.coupler_to_bus_named_subsystem_pbus)</data>
                      <graph id="69::" edgedefault="directed">
                        <node id="69::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                        <node id="71">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">widget</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                          <data key="d">TLWidthWidget_3 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.coupler_to_bus_named_subsystem_pbus.widget)</data>
                          <graph id="71::" edgedefault="directed">
                            <node id="71::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                              <data key="d">, 
</data>
                            </node>
                          </graph>
                        </node>
                      </graph>
                    </node>
                    <node id="67">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">buffer_1</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">TLBuffer_7 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.buffer_1)</data>
                      <graph id="67::" edgedefault="directed">
                        <node id="67::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
a:BufferParams:0, b:BufferParams:0, c:BufferParams:0, d:BufferParams:0, e:BufferParams:0</data>
                        </node>
                      </graph>
                    </node>
                    <node id="61">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">coupler_to_l2_ctrl</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLInterconnectCoupler_7 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.coupler_to_l2_ctrl)</data>
                      <graph id="61::" edgedefault="directed">
                        <node id="61::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                        <node id="63">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">fragmenter</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                          <data key="d">TLFragmenter_3 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.coupler_to_l2_ctrl.fragmenter)</data>
                          <graph id="63::" edgedefault="directed">
                            <node id="63::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">On Output Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 3

Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 3

Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                            </node>
                          </graph>
                        </node>
                        <node id="62">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">buffer</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                          <data key="d">TLBuffer_6 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.coupler_to_l2_ctrl.buffer)</data>
                          <graph id="62::" edgedefault="directed">
                            <node id="62::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">On Output Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 1

Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 3

Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]



, 
a:BufferParams:1, b:BufferParams:1, c:BufferParams:1, d:BufferParams:1, e:BufferParams:1</data>
                            </node>
                          </graph>
                        </node>
                      </graph>
                    </node>
                    <node id="40">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">wrapped_error_device</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">ErrorDeviceWrapper (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.wrapped_error_device)</data>
                      <graph id="40::" edgedefault="directed">
                        <node id="42">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">buffer</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                          <data key="d">TLBuffer_5 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.wrapped_error_device.buffer)</data>
                          <graph id="42::" edgedefault="directed">
                            <node id="42::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 1

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 3

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



, 
a:BufferParams:2, b:BufferParams:2, c:BufferParams:2, d:BufferParams:2, e:BufferParams:2</data>
                            </node>
                          </graph>
                        </node>
                        <node id="41">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">error</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                          <data key="d">TLError (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.wrapped_error_device.error)</data>
                          <graph id="41::" edgedefault="directed">
                            <node id="41::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">
---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 1

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



, 
</data>
                            </node>
                          </graph>
                        </node>
                      </graph>
                    </node>
                    <node id="39">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">atomics</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLAtomicAutomata_1 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.atomics)</data>
                      <graph id="39::" edgedefault="directed">
                        <node id="39::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="38">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">buffer</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLBuffer_4 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.buffer)</data>
                      <graph id="38::" edgedefault="directed">
                        <node id="38::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
a:BufferParams:2, b:BufferParams:2, c:BufferParams:2, d:BufferParams:2, e:BufferParams:2</data>
                        </node>
                      </graph>
                    </node>
                    <node id="37">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">out_xbar</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLXbar_5 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.out_xbar)</data>
                      <graph id="37::" edgedefault="directed">
                        <node id="37::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 3

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 3

Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 4

Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 1

Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="36">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">in_xbar</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLXbar_4 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.in_xbar)</data>
                      <graph id="36::" edgedefault="directed">
                        <node id="36::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Input Edge:

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="35">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">fixer</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLFIFOFixer_2 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.fixer)</data>
                      <graph id="35::" edgedefault="directed">
                        <node id="35::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="33">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">fixedClockNode</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">FixedClockBroadcast_3 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.fixedClockNode)</data>
                      <graph id="33::" edgedefault="directed">
                        <node id="33::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="32">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">clockGroup</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">ClockGroup_3 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.clockGroup)</data>
                      <graph id="32::" edgedefault="directed">
                        <node id="32::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="31">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">subsystem_cbus_clock_groups</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">ClockGroupAggregator_3 (VCU440FPGATestHarness.chiptop.system.subsystem_cbus.subsystem_cbus_clock_groups)</data>
                      <graph id="31::" edgedefault="directed">
                        <node id="31::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                  </graph>
                </node>
                <node id="24">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">subsystem_fbus</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">FrontBus (VCU440FPGATestHarness.chiptop.system.subsystem_fbus)</data>
                  <graph id="24::" edgedefault="directed">
                    <node id="24::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                    <node id="27">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">fixedClockNode</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">FixedClockBroadcast_2 (VCU440FPGATestHarness.chiptop.system.subsystem_fbus.fixedClockNode)</data>
                      <graph id="27::" edgedefault="directed">
                        <node id="27::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="26">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">clockGroup</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">ClockGroup_2 (VCU440FPGATestHarness.chiptop.system.subsystem_fbus.clockGroup)</data>
                      <graph id="26::" edgedefault="directed">
                        <node id="26::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="25">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">subsystem_fbus_clock_groups</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">ClockGroupAggregator_2 (VCU440FPGATestHarness.chiptop.system.subsystem_fbus.subsystem_fbus_clock_groups)</data>
                      <graph id="25::" edgedefault="directed">
                        <node id="25::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                  </graph>
                </node>
                <node id="14">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">subsystem_pbus</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">PeripheryBus (VCU440FPGATestHarness.chiptop.system.subsystem_pbus)</data>
                  <graph id="14::" edgedefault="directed">
                    <node id="14::2">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">
---------------------------------------------

On Input Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]



, 
</data>
                    </node>
                    <node id="14::1">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                    <node id="14::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                    <node id="170">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">coupler_to_device_named_spi_0</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLInterconnectCoupler_6 (VCU440FPGATestHarness.chiptop.system.subsystem_pbus.coupler_to_device_named_spi_0)</data>
                      <graph id="170::" edgedefault="directed">
                        <node id="170::1">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                        <node id="170::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                        <node id="172">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">fragmenter</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                          <data key="d">TLFragmenter_2 (VCU440FPGATestHarness.chiptop.system.subsystem_pbus.coupler_to_device_named_spi_0.fragmenter)</data>
                          <graph id="172::" edgedefault="directed">
                            <node id="172::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">On Output Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                            </node>
                          </graph>
                        </node>
                      </graph>
                    </node>
                    <node id="163">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">coupler_to_device_named_uart_0</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLInterconnectCoupler_5 (VCU440FPGATestHarness.chiptop.system.subsystem_pbus.coupler_to_device_named_uart_0)</data>
                      <graph id="163::" edgedefault="directed">
                        <node id="163::1">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                        <node id="163::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                        <node id="165">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">fragmenter</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                          <data key="d">TLFragmenter_1 (VCU440FPGATestHarness.chiptop.system.subsystem_pbus.coupler_to_device_named_uart_0.fragmenter)</data>
                          <graph id="165::" edgedefault="directed">
                            <node id="165::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">On Output Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                            </node>
                          </graph>
                        </node>
                      </graph>
                    </node>
                    <node id="158">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">coupler_to_slave_named_bootaddressreg</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLInterconnectCoupler_4 (VCU440FPGATestHarness.chiptop.system.subsystem_pbus.coupler_to_slave_named_bootaddressreg)</data>
                      <graph id="158::" edgedefault="directed">
                        <node id="160">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">buffer</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                          <data key="d">TLBuffer_2 (VCU440FPGATestHarness.chiptop.system.subsystem_pbus.coupler_to_slave_named_bootaddressreg.buffer)</data>
                          <graph id="160::" edgedefault="directed">
                            <node id="160::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                              <data key="d">, 
a:BufferParams:0, b:BufferParams:0, c:BufferParams:0, d:BufferParams:0, e:BufferParams:0</data>
                            </node>
                          </graph>
                        </node>
                        <node id="159">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">fragmenter</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                          <data key="d">TLFragmenter (VCU440FPGATestHarness.chiptop.system.subsystem_pbus.coupler_to_slave_named_bootaddressreg.fragmenter)</data>
                          <graph id="159::" edgedefault="directed">
                            <node id="159::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">On Output Edge:

Master Name = TLFragmenter
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1040)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 8]
putFull = TransferSizes[1, 8]
putPartial = TransferSizes[1, 8]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                            </node>
                          </graph>
                        </node>
                      </graph>
                    </node>
                    <node id="70">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">buffer_1</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLBuffer_1 (VCU440FPGATestHarness.chiptop.system.subsystem_pbus.buffer_1)</data>
                      <graph id="70::" edgedefault="directed">
                        <node id="70::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 4

Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
a:BufferParams:2, b:BufferParams:2, c:BufferParams:2, d:BufferParams:2, e:BufferParams:2</data>
                        </node>
                      </graph>
                    </node>
                    <node id="23">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">atomics</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLAtomicAutomata (VCU440FPGATestHarness.chiptop.system.subsystem_pbus.atomics)</data>
                      <graph id="23::" edgedefault="directed">
                        <node id="23::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="22">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">buffer</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLBuffer (VCU440FPGATestHarness.chiptop.system.subsystem_pbus.buffer)</data>
                      <graph id="22::" edgedefault="directed">
                        <node id="22::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
a:BufferParams:2, b:BufferParams:2, c:BufferParams:2, d:BufferParams:2, e:BufferParams:2</data>
                        </node>
                      </graph>
                    </node>
                    <node id="21">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">out_xbar</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLXbar_2 (VCU440FPGATestHarness.chiptop.system.subsystem_pbus.out_xbar)</data>
                      <graph id="21::" edgedefault="directed">
                        <node id="21::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="20">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">in_xbar</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">TLXbar_1 (VCU440FPGATestHarness.chiptop.system.subsystem_pbus.in_xbar)</data>
                      <graph id="20::" edgedefault="directed">
                        <node id="20::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="19">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">fixer</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLFIFOFixer_1 (VCU440FPGATestHarness.chiptop.system.subsystem_pbus.fixer)</data>
                      <graph id="19::" edgedefault="directed">
                        <node id="19::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)

Master Name = custom-boot
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(64,65)


Slave Port Beatbytes = 8
Slave Port MinLatency = 0

Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="17">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">fixedClockNode</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">FixedClockBroadcast_1 (VCU440FPGATestHarness.chiptop.system.subsystem_pbus.fixedClockNode)</data>
                      <graph id="17::" edgedefault="directed">
                        <node id="17::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="16">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">clockGroup</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">ClockGroup_1 (VCU440FPGATestHarness.chiptop.system.subsystem_pbus.clockGroup)</data>
                      <graph id="16::" edgedefault="directed">
                        <node id="16::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="15">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">subsystem_pbus_clock_groups</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">ClockGroupAggregator_1 (VCU440FPGATestHarness.chiptop.system.subsystem_pbus.subsystem_pbus_clock_groups)</data>
                      <graph id="15::" edgedefault="directed">
                        <node id="15::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                  </graph>
                </node>
                <node id="6">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">subsystem_sbus</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                  <data key="d">RingSystemBus (VCU440FPGATestHarness.chiptop.system.subsystem_sbus)</data>
                  <graph id="6::" edgedefault="directed">
                    <node id="6::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                    <node id="120">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">coupler_from_tile</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">TLInterconnectCoupler_3 (VCU440FPGATestHarness.chiptop.system.subsystem_sbus.coupler_from_tile)</data>
                      <graph id="120::" edgedefault="directed">
                        <node id="120::3">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                        <node id="120::1">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                        <node id="120::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="75">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">coupler_to_bus_named_subsystem_l2</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">TLInterconnectCoupler_2 (VCU440FPGATestHarness.chiptop.system.subsystem_sbus.coupler_to_bus_named_subsystem_l2)</data>
                      <graph id="75::" edgedefault="directed">
                        <node id="76">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">widget</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                          <data key="d">TLWidthWidget_2 (VCU440FPGATestHarness.chiptop.system.subsystem_sbus.coupler_to_bus_named_subsystem_l2.widget)</data>
                          <graph id="76::" edgedefault="directed">
                            <node id="76::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                              <data key="d">, 
</data>
                            </node>
                          </graph>
                        </node>
                      </graph>
                    </node>
                    <node id="66">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">coupler_to_bus_named_subsystem_cbus</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLInterconnectCoupler (VCU440FPGATestHarness.chiptop.system.subsystem_sbus.coupler_to_bus_named_subsystem_cbus)</data>
                      <graph id="66::" edgedefault="directed">
                        <node id="66::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                        <node id="68">
                          <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">widget</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                          <data key="d">TLWidthWidget (VCU440FPGATestHarness.chiptop.system.subsystem_sbus.coupler_to_bus_named_subsystem_cbus.widget)</data>
                          <graph id="68::" edgedefault="directed">
                            <node id="68::0">
                              <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                              <data key="d">On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)


Slave Port Beatbytes = 8
Slave Port MinLatency = 2

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



, 
</data>
                            </node>
                          </graph>
                        </node>
                      </graph>
                    </node>
                    <node id="13">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">system_bus_ring</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">TLRingNetwork (VCU440FPGATestHarness.chiptop.system.subsystem_sbus.system_bus_ring)</data>
                      <graph id="13::" edgedefault="directed">
                        <node id="13::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



On Output Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(32,33)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(33,34)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(34,35)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]




---------------------------------------------

On Input Edge:

Master Name = stream-reader
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(16,32)

Master Name = stream-writer
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,16)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



On Input Edge:

Master Name = Core 0 DCache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(0,1)

Master Name = Core 0 DCache MMIO
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(1,2)

Master Name = Core 0 ICache
visibility = List(AddressSet(0x0, ~0x0))
emits = acquireT = TransferSizes[1, 4096]
acquireB = TransferSizes[1, 4096]
arithmetic = TransferSizes[1, 4096]
logical = TransferSizes[1, 4096]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]


sourceId = IdRange(2,3)


Slave Port Beatbytes = 16
Slave Port MinLatency = 2

Slave Name = error
Slave Address = List(AddressSet(0x3000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 4096]
putFull = TransferSizes[1, 4096]
putPartial = TransferSizes[1, 4096]
hint = TransferSizes[1, 4096]



Slave Name = l2
Slave Address = List(AddressSet(0x2010000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = subsystem_pbus
Slave Address = List(AddressSet(0x4000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = uart_0
Slave Address = List(AddressSet(0x64000000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = spi_0
Slave Address = List(AddressSet(0x64001000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = plic
Slave Address = List(AddressSet(0xc000000, 0x3ffffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = clint
Slave Address = List(AddressSet(0x2000000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = bootrom
Slave Address = List(AddressSet(0x10000, 0xffff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[0, 0]
logical = TransferSizes[0, 0]
get = TransferSizes[1, 64]
putFull = TransferSizes[0, 0]
putPartial = TransferSizes[0, 0]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x100000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = chipyardPRCI
Slave Address = List(AddressSet(0x110000, 0xfff))
supports = acquireT = TransferSizes[0, 0]
acquireB = TransferSizes[0, 0]
arithmetic = TransferSizes[1, 8]
logical = TransferSizes[1, 8]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[0, 0]



Slave Name = system
Slave Address = List(AddressSet(0x80000000, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000040, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x80000080, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



Slave Name = system
Slave Address = List(AddressSet(0x800000c0, 0x7fffff3f))
supports = acquireT = TransferSizes[64, 64]
acquireB = TransferSizes[64, 64]
arithmetic = TransferSizes[1, 16]
logical = TransferSizes[1, 16]
get = TransferSizes[1, 64]
putFull = TransferSizes[1, 64]
putPartial = TransferSizes[1, 64]
hint = TransferSizes[1, 64]



, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="9">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">fixedClockNode</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">FixedClockBroadcast (VCU440FPGATestHarness.chiptop.system.subsystem_sbus.fixedClockNode)</data>
                      <graph id="9::" edgedefault="directed">
                        <node id="9::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="8">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">clockGroup</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">ClockGroup (VCU440FPGATestHarness.chiptop.system.subsystem_sbus.clockGroup)</data>
                      <graph id="8::" edgedefault="directed">
                        <node id="8::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="true"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                    <node id="7">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">system_bus_clock_groups</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                      <data key="d">ClockGroupAggregator (VCU440FPGATestHarness.chiptop.system.subsystem_sbus.system_bus_clock_groups)</data>
                      <graph id="7::" edgedefault="directed">
                        <node id="7::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">, 
</data>
                        </node>
                      </graph>
                    </node>
                  </graph>
                </node>
                <node id="4">
                  <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">ibus</y:NodeLabel><y:BorderStyle type="dotted"/></y:ShapeNode></data>
                  <data key="d">InterruptBusWrapper (VCU440FPGATestHarness.chiptop.system.ibus)</data>
                  <graph id="4::" edgedefault="directed">
                    <node id="4::0">
                      <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                      <data key="d">, 
</data>
                    </node>
                    <node id="5">
                      <data key="n"><y:ShapeNode><y:NodeLabel modelName="sides" modelPosition="w" rotationAngle="270.0">int_bus</y:NodeLabel><y:BorderStyle type="line"/></y:ShapeNode></data>
                      <data key="d">IntXbar (VCU440FPGATestHarness.chiptop.system.ibus.int_bus)</data>
                      <graph id="5::" edgedefault="directed">
                        <node id="5::0">
                          <data key="n"><y:ShapeNode><y:Shape type="ellipse"/><y:Fill color="#FFCC00" transparent="false"/></y:ShapeNode></data>
                          <data key="d">Interrupt Node
, 
</data>
                        </node>
                      </graph>
                    </node>
                  </graph>
                </node>
              </graph>
            </node>
          </graph>
        </node>
      </graph>
    </node>
    <edge source="1::13" target="196::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="1::11" target="193::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="1::9" target="1::10"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="1::7" target="1::8"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="1::5" target="1::6"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="1::3" target="1::4"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="1::1" target="194::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="1::0" target="1::1"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="195::0" target="201::1"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#ff0000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">8</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="203::0" target="195::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#ff0000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">8</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="201::1" target="202::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#ff0000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">8</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="202::0" target="201::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00ccff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="200::0" target="203::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00ccff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="199::0" target="200::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00ccff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="198::0" target="199::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00ccff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="197::0" target="198::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00ccff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="196::0" target="197::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="194::0" target="193::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="193::0" target="1::2"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="193::0" target="1::12"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="2::1" target="192::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="192::0" target="186::1"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="191::0" target="2::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="3::25" source="173::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="3::23" source="166::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="3::20" target="119::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="3::14" source="140::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="3::13" source="138::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="3::12" source="136::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="3::10" source="80::7"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="3::9" source="80::6"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="3::8" source="80::5"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">2</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="3::2" target="83::6"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="180::0" target="179::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="179::0" target="178::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="178::0" target="176::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="177::0" target="7::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="177::0" target="15::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="177::0" target="25::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="177::0" target="44::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="177::0" target="31::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="176::0" target="177::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="176::0" target="177::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="176::0" target="177::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="176::0" target="177::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="176::0" target="177::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="176::0" target="191::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="186::1" target="181::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="181::0" target="180::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="173::0" source="5::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="169::4" source="3::25"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="169::3" target="171::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="169::1" source="174::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="169::0" target="3::26"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="174::0" source="169::4"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="171::0" target="169::2"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="166::0" source="5::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="162::4" source="3::23"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="162::3" target="164::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="162::1" source="167::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="162::0" target="3::24"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="167::0" source="162::4"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="164::0" target="162::2"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="140::0" source="117::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="138::0" source="116::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="136::0" source="115::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="133::0" source="3::10"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="131::0" source="3::9"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="129::0" source="3::8"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">2</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="127::0" source="83::14"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="119::0" target="83::4"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="118::0" target="83::2"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="117::0" source="3::5"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="116::0" source="3::4"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="115::0" source="3::3"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="112::1" source="129::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">2</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="109::1" source="131::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="109::1" source="133::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="80::12" source="3::14"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="80::11" source="3::13"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="80::10" source="3::12"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="80::7" source="132::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="80::6" source="130::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="80::5" source="128::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">2</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="80::3" target="120::3"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="80::3" target="120::3"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="80::0" target="82::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="141::0" source="80::12"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="139::0" source="80::11"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="137::0" source="80::10"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#ff00ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="132::0" source="83::14"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="130::0" source="83::14"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="128::0" source="83::14"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">2</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="122::0" target="80::3"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="122::0" target="80::3"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="121::0" target="122::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="121::0" target="122::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="82::0" target="81::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="83::18" source="139::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="83::17" source="141::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="83::16" source="137::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="83::14" source="86::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="83::14" source="86::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">2</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="83::14" source="86::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="83::14" source="86::0"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">1</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="83::12" target="93::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="83::9" target="143::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="83::8" target="91::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="83::6" target="89::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="83::4" target="88::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="83::2" target="87::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="83::0" target="121::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="83::0" target="121::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="105::0" target="84::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="96::0" target="83::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="103::0" target="96::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="102::0" target="97::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="101::0" target="97::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="100::0" target="102::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="99::0" target="101::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="97::0" target="103::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="94::0" target="84::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="92::0" target="83::10"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="91::0" target="142::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="91::0" target="3::21"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="89::0" target="83::5"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="88::0" target="83::3"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="88::0" target="104::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="87::0" target="83::1"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#cccc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="86::0" source="83::15"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">5</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="84::0" target="83::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="77::0" target="43::1"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="77::0" target="43::1"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="77::0" target="43::1"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="77::0" target="43::1"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="79::0" target="77::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="79::0" target="77::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="79::0" target="77::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="79::0" target="77::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="65::0" target="79::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="65::0" target="79::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="65::0" target="79::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="65::0" target="79::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="64::0" target="57::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="64::0" target="57::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="64::0" target="57::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="64::0" target="57::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="60::0" target="65::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="60::0" target="65::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="60::0" target="65::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="60::0" target="65::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="59::0" target="60::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="59::0" target="60::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="59::0" target="60::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="59::0" target="60::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="58::0" target="56::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="58::0" target="56::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="58::0" target="56::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="58::0" target="56::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="57::0" target="58::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="57::0" target="58::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="57::0" target="58::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="57::0" target="58::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="56::0" target="59::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="56::0" target="59::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="56::0" target="59::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="56::0" target="59::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="54::0" target="51::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="53::0" target="54::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="52::0" target="53::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="43::1" target="78::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="43::1" target="78::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="43::1" target="78::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="43::1" target="78::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="144::0" target="147::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="147::0" target="146::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="146::0" target="145::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="145::0" target="3::16"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="78::0" target="49::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="78::0" target="49::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="78::0" target="49::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="78::0" target="49::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="50::0" target="144::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="49::0" target="48::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="49::0" target="48::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="49::0" target="48::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="49::0" target="48::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="48::0" target="50::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="46::0" target="43::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="45::0" target="46::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="44::0" target="45::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="30::2" target="157::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="30::1" target="67::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="190::0" target="189::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="189::0" target="188::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="188::0" target="186::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="185::0" target="184::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="184::0" target="183::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="183::0" target="181::1"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="157::0" target="36::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="155::0" target="156::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="156::0" target="154::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="113::0" target="114::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="114::0" target="112::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="110::0" target="111::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="111::0" target="109::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="69::0" target="14::1"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="71::0" target="69::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="67::0" target="36::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="61::0" target="63::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="63::0" target="62::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="62::0" target="56::1"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="42::0" target="41::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="39::0" target="38::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="38::0" target="35::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="37::0" target="42::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="37::0" target="61::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="37::0" target="71::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="37::0" target="110::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="37::0" target="113::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="37::0" target="155::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="37::0" target="185::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="37::0" target="190::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="36::0" target="39::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="35::0" target="37::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="33::0" target="30::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="33::0" target="108::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="33::0" target="153::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="33::0" target="175::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="32::0" target="33::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="31::0" target="32::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="27::0" target="24::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="26::0" target="27::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="25::0" target="26::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="14::1" target="70::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="170::1" target="169::3"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="170::0" target="172::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="172::0" target="170::1"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="163::1" target="162::3"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="163::0" target="165::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="165::0" target="163::1"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="160::0" target="159::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="159::0" target="14::2"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="70::0" target="20::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="23::0" target="22::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="22::0" target="19::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="21::0" target="160::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="21::0" target="163::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="21::0" target="170::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="20::0" target="23::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="19::0" target="21::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="17::0" target="14::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="17::0" target="161::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="17::0" target="168::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="16::0" target="17::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="15::0" target="16::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="120::3" target="120::1"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="120::3" target="120::1"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="120::1" target="120::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="120::1" target="120::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="120::0" target="13::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="120::0" target="13::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="76::0" target="64::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="76::0" target="64::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="76::0" target="64::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="76::0" target="64::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="66::0" target="30::1"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="68::0" target="66::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">64</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="13::0" target="68::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="13::0" target="76::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="13::0" target="76::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="13::0" target="76::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="13::0" target="76::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#000000" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">128</y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="9::0" target="6::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="9::0" target="4::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="9::0" target="80::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="8::0" target="9::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="7::0" target="8::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge source="7::0" target="52::0"><data key="e"><y:PolyLineEdge><y:Arrows source="none" target="standard"/><y:LineStyle color="#00cc00" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0"></y:EdgeLabel></y:PolyLineEdge></data></edge>
    <edge target="5::0" source="109::1"><data key="e"><y:PolyLineEdge><y:Arrows source="standard" target="none"/><y:LineStyle color="#0000ff" type="line" width="1.0"/><y:EdgeLabel modelName="centered" rotationAngle="270.0">2</y:EdgeLabel></y:PolyLineEdge></data></edge>
  </graph>
</graphml>
